apiVersion: v1
items:
- apiVersion: v1
  data:
    master.conf: |-
      dir /data
      rename-command FLUSHDB ""
      rename-command FLUSHALL ""
    redis.conf: |-
      # User-supplied configuration:
      # Enable AOF https://redis.io/topics/persistence#append-only-file
      appendonly yes
      # Disable RDB persistence, AOF persistence already enabled.
      save ""
    replica.conf: |-
      dir /data
      slave-read-only yes
      rename-command FLUSHDB ""
      rename-command FLUSHALL ""
  kind: ConfigMap
  metadata:
    labels:
      app: redis
      chart: redis-12.2.3
      heritage: Tiller
      release: tensorsec-cache
    name: tensorsec-cache-redis
- apiVersion: v1
  data:
    ping_liveness_local.sh: |-
      #!/bin/bash
      export REDISCLI_AUTH="$REDIS_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        redis-cli \
          -h localhost \
          -p $REDIS_PORT \
          ping
      )
      if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
        echo "$response"
        exit 1
      fi
    ping_liveness_local_and_master.sh: |-
      script_dir="$(dirname "$0")"
      exit_status=0
      "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
      "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
      exit $exit_status
    ping_liveness_master.sh: |-
      #!/bin/bash
      export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        redis-cli \
          -h $REDIS_MASTER_HOST \
          -p $REDIS_MASTER_PORT_NUMBER \
          ping
      )
      if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
        echo "$response"
        exit 1
      fi
    ping_readiness_local.sh: |-
      #!/bin/bash
      export REDISCLI_AUTH="$REDIS_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        redis-cli \
          -h localhost \
          -p $REDIS_PORT \
          ping
      )
      if [ "$response" != "PONG" ]; then
        echo "$response"
        exit 1
      fi
    ping_readiness_local_and_master.sh: |-
      script_dir="$(dirname "$0")"
      exit_status=0
      "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
      "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
      exit $exit_status
    ping_readiness_master.sh: |-
      #!/bin/bash
      export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        redis-cli \
          -h $REDIS_MASTER_HOST \
          -p $REDIS_MASTER_PORT_NUMBER \
          ping
      )
      if [ "$response" != "PONG" ]; then
        echo "$response"
        exit 1
      fi
  kind: ConfigMap
  metadata:
    labels:
      app: redis
      chart: redis-12.2.3
      heritage: Tiller
      release: tensorsec-cache
    name: tensorsec-cache-redis-health
- apiVersion: v1
  data:
    start-master.sh: |
      #!/bin/bash
      useradd redis
      chown -R redis /data
      if [[ -n $REDIS_PASSWORD_FILE ]]; then
        password_aux=`cat ${REDIS_PASSWORD_FILE}`
        export REDIS_PASSWORD=$password_aux
      fi
      if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
      fi
      if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
      fi
      ARGS=("--port" "${REDIS_PORT}")
      ARGS+=("--requirepass" "${REDIS_PASSWORD}")
      ARGS+=("--masterauth" "${REDIS_PASSWORD}")
      ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
      ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
      exec /run.sh "${ARGS[@]}"
  kind: ConfigMap
  metadata:
    labels:
      app: redis
      chart: redis-12.2.3
      heritage: Tiller
      release: tensorsec-cache
    name: tensorsec-cache-redis-scripts
- apiVersion: v1
  data:
    setup.sh: |-
      #!/bin/bash

      echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"

      if [[ "$MY_POD_NAME" = "tensorsec-mongo-mongodb-0" ]]; then
          echo "Pod name matches initial primary pod name, configuring node as a primary"
          export MONGODB_REPLICA_SET_MODE="primary"
      else
          echo "Pod name doesn't match initial primary pod name, configuring node as a secondary"
          export MONGODB_REPLICA_SET_MODE="secondary"
          export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
          export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
          export MONGODB_ROOT_PASSWORD="" MONGODB_USERNAME="" MONGODB_DATABASE="" MONGODB_PASSWORD=""
      fi

      exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: tensorsec-mongo
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-10.3.1
    name: tensorsec-mongo-mongodb-scripts
- apiVersion: v1
  data:
    patterns.json: |-
      [
        {
        }
      ]
  kind: ConfigMap
  metadata:
    name: tensorsec-scanner-configmap
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
